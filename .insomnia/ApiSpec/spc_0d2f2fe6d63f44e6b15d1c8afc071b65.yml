_id: spc_0d2f2fe6d63f44e6b15d1c8afc071b65
type: ApiSpec
parentId: wrk_a14d3233ec9e4a5a8512f084572b8c01
modified: 1617021401389
created: 1615646672691
fileName: appetzr
contents: >-
  openapi: 3.0.0

  info:
    description: "Appetizr API Documentation Swagger."
    version: 1.0.0
    title: Appetizr API Documentation
    termsOfService: http://appetizr.co/tos/
    contact:
      email: dev@appetizr.co
  servers:
    - url: https://api.appetizr.co
      description: Production Server API
    - url: https://api.dev.appetizr.co
      description: Development Server API
  tags:
    - name: profile
      description: Account Profile Detail (Access By Member or Venue)
    - name: venues
      description: All Venue Details & Venue Favorite (Access By Public or Member)
    - name: products
      description: Venue Products Details (Access By Public and Venue)
    - name: orders
      description: Order Details (Access By Member and Venue)
    - name: discount
      description: Discount Detail (Access By Venue)
    - name: reviews
      description: Reviews Detail (Access By Member and Venue)
    - name: notification
      description: Notification Detail (Access By Member)

  paths:
    /profile:
      get:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Detail Member Profile (Access By Member)
        responses:
          "200":
            $ref: '#/components/responseBodies/Member'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
      post:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Create New Member Profile Detail (Access By Member)
        description: ""
        requestBody:
          $ref: '#/components/requestBodies/Member'
        responses:
          "200":
            $ref: '#/components/responseBodies/Member'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
      put:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Update Member Profile Detail (Access By Member)
        description: ""
        requestBody:
          $ref: '#/components/requestBodies/Member'
        responses:
          "200":
            $ref: '#/components/responseBodies/Member'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /profile/change:
      post:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Update Member Profile Picture (Access By Member)
        requestBody:
          $ref: '#/components/requestBodies/ProfilePicture'
        responses:
          "200":
            $ref: '#/components/responseBodies/Member'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /profile/venue:
      get:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Detail of Venue Profile (Access By Venue)
        responses:
          "200":
            $ref: '#/components/responseBodies/Venue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
      post:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Create New Venue Profile Detail (Access By Venue)
        requestBody:
          $ref: '#/components/requestBodies/Venue'
        responses:
          "200":
            $ref: '#/components/responseBodies/Venue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
      put:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Update Venue Profile Detail (Access By Venue)
        requestBody:
          $ref: '#/components/requestBodies/Venue'
        responses:
          "200":
            $ref: '#/components/responseBodies/Venue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /profile/venue/change:
      post:
        security:
          - bearerAuth: []
        tags:
          - profile
        summary: Update Venue Profile Picture (Access By Venue)
        requestBody:
          $ref: '#/components/requestBodies/ProfilePicture'
        responses:
          "200":
            $ref: '#/components/responseBodies/Venue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /venues:
      get:
        tags:
          - venues
        summary: Get All Venue with Filter (Access By Public)
        parameters:
          - $ref: '#/components/queryParameter/nameFilter'
          - $ref: '#/components/queryParameter/productsortBy'
          - $ref: '#/components/queryParameter/culturCategoryFilter'
          - $ref: '#/components/queryParameter/postalCodeFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/VenueAll'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /venues/culture:
      get:
        tags:
          - venues
        summary: Get Option Venue Culture Category (Access By Public)
        responses:
          "200":
            $ref: '#/components/responses/SuccessArray'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /venues/{venueId}:
      get:
        tags:
          - venues
        summary: Get Venue Detail by VenueID (Access By Public)
        parameters:
          - $ref: '#/components/queryParameter/venueIdFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/Venue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /venues/favorites:
      get:
        security:
          - bearerAuth: []
        tags:
          - venues
        summary: Get All Venue Favorites (Access By Member)
        parameters:
          - in: query
            name: isBlocked
            schema:
              type: boolean
            description: 'Show venue With Filter by isBlocked'
        responses:
          "200":
            $ref: '#/components/responseBodies/VenueFavoriteAll'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
      post:
        security:
          - bearerAuth: []
        tags:
          - venues
        summary: Add Venue Favorite or Block Venue (Access By Member)
        requestBody:
          $ref: '#/components/requestBodies/VenueFavorite'
        responses:
          "200":
            $ref: '#/components/responseBodies/VenueFavorite'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /venues/favorites/{id}:
      get:
        security:
          - bearerAuth: []
        tags:
          - venues
        summary: Update Venue Favorites or Block Venue (Access By Member)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/VenueFavorite'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
      put:
        security:
          - bearerAuth: []
        tags:
          - venues
        summary: Update Venue Favorites or Block Venue by VenueID (Access By Member)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        requestBody:
          $ref: '#/components/requestBodies/VenueFavoriteID'
        responses:
          "200":
            $ref: '#/components/responseBodies/VenueFavorite'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
      delete:
        security:
          - bearerAuth: []
        tags:
          - venues
        summary: Delete Venue From Favorites by VenueID (Access By Member)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responses/Success'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /products:
      get:
        tags:
          - products
        summary: Get All Venue Products with Filter by VenueId (Access By Public)
        parameters:
          - $ref: '#/components/queryParameter/venueIdFilter'
          - $ref: '#/components/queryParameter/nameFilter'
          - $ref: '#/components/queryParameter/productsortBy'
        responses:
          "200":
            $ref: '#/components/responseBodies/ProductsVenueMember'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /products/{id}:
      get:
        tags:
          - products
        summary: Get Venue Product by ID (Access By Public)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/Product'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /products/venue:
      get:
        security:
          - bearerAuth: []
        tags:
          - products
        summary: Get All Venue Products (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/nameFilter'
          - $ref: '#/components/queryParameter/productsortBy'
        responses:
          "200":
            $ref: '#/components/responseBodies/ProductsVenue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
      post:
        security:
          - bearerAuth: []
        tags:
          - products
        summary: Add Product Venue (Access By Venue)
        requestBody:
          $ref: '#/components/requestBodies/Product'
        responses:
          "200":
            $ref: '#/components/responseBodies/ProductVenue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /products/venue/upload:
      post:
        security:
          - bearerAuth: []
        tags:
          - products
        summary: Upload Product Image (Access By Venue)
        requestBody:
          $ref: '#/components/requestBodies/UploadImage'
        responses:
          "200":
            $ref: '#/components/responseBodies/UploadImage'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /products/venue/{id}:
      get:
        security:
          - bearerAuth: []
        tags:
          - products
        summary: Get Product Venue by ID (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/ProductVenue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
      put:
        security:
          - bearerAuth: []
        tags:
          - products
        summary: Update Product Venue by ID (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        requestBody:
          $ref: '#/components/requestBodies/Product'
        responses:
          "200":
            $ref: '#/components/responseBodies/ProductVenue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
      delete:
        security:
          - bearerAuth: []
        tags:
          - products
        summary: Delete Product Venue by ID (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responses/Success'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /cart:
      post:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Add Order to Cart (Access By Member)
        requestBody:
          $ref: '#/components/requestBodies/Order'
        responses:
          "200":
            $ref: '#/components/responseBodies/Order'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
    /orders:
      get:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Get All Order (Access By Member)
        responses:
          "200":
            $ref: '#/components/responseBodies/OrderAllMember'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /orders/{id}:
      get:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Get Order By ID (Access By Member)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/OrderIdMember'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /orders/venue:
      get:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Get All Order (Access By Venue)
        responses:
          "200":
            $ref: '#/components/responseBodies/OrderAllVenue'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
    /orders/venue/{id}:   
      get:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Get Order Venue by ID (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responseBodies/Order'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
      put:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Update Order Venue by ID (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        requestBody:
          $ref: '#/components/requestBodies/OrderVenue'
        responses:
          "200":
            $ref: '#/components/responseBodies/Order'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'
      delete:
        security:
          - bearerAuth: []
        tags:
          - orders
        summary: Delete Order Venue by ID (Access By Venue)
        parameters:
          - $ref: '#/components/queryParameter/idFilter'
        responses:
          "200":
            $ref: '#/components/responses/Success'
          "401":
            $ref: '#/components/responses/UnauthorizedError'
          "422":
            $ref: '#/components/responses/UnprocessableEntity'


            
  components:
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

    responses:
      Success:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
      SuccessArray:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    type: string
      UnauthorizedError:
        description: Authorization information is missing or invalid.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 401
                message:
                  type: string
                  example: error
      UnprocessableEntity:
        description: Unprocessable Entity
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 422
                message:
                  type: string
                  example: error

    schemas:
      venueProfile:
        type: object
        required:
          - venueName
          - bankBSB
          - bankName
          - bankAccountNo
          - phoneNumber
          - address
          - postalCode
          - long
          - lat
          - cultureCategory
        properties:
          id:
            type: uuid
            readOnly: true
            example: 9138017c-6a3b-42b8-adda-a1f1b94377e5
          venueName:
            type: string
            example: Opera House
          venueEmail:
            type: string
            readOnly: true
            example: operahouse@example.com
          bankBSB:
            type: number
            example: "012345"
          bankName:
            type: string
            example: Opera House
          bankAccountNo:
            type: string
            example: "0123456789"
          phoneNumber:
            type: string
            example: "(+61) 1234 5678"
          address:
            type: string
            example: "10 Example Address, Sydney, Australia, 1234"
          postalCode:
            type: number
            example: 12345
          mapLong:
            type: number
            example: -33.8473567
          mapLat:
            type: number
            example: 150.6517896
          cultureCategory:
            type: string
            example: 'japanese'
            enum:
              - japanese
              - chinese
              - european
              - americas
          profilePicture:
            type: string
            readOnly: true
            example: https://assets.appetizr.co/2021/03/373cf69e-23f2-430a-acc3-7234800edaf0.png
          createdAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
          updatedAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
      memberProfile:
        type: object
        required:
          - name
          - mobileNumber
        properties:
          id:
            type: uuid
            readOnly: true
            example: c8402b37-0f24-43db-be89-ae7ac7983e16
          memberName:
            type: string
            example: john doe
          email:
            type: string
            readOnly: true
            example: johndoe@example.com
          mobileNumber:
            type: string
            example: "(+61) 1234 5678"
          profilePicture:
            type: string
            readOnly: true
            example: https://assets.appetizr.co/2021/03/373cf69e-23f2-430a-acc3-7234800edaf0.png
          createdAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
          updatedAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
      userFavorites:
        type: object
        required:
          - name
          - mobileNumber
        properties:
          id:
            type: uuid
            readOnly: true
            example: 5928876c-7bf6-43e9-95ca-bf569c8d2af5
          userId:
            type: uuid
            readOnly: true
            example: c8402b37-0f24-43db-be89-ae7ac7983e16
            description: User ID From Table Schema memberProfile
          venueId:
            type: uuid
            example: 9138017c-6a3b-42b8-adda-a1f1b94377e5
            description: Venue ID From Table Schema venueProfile
          isBlocked:
            type: boolean
            example: false
            description: true = Block Venue, false = Favorite Venue
          createdAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
          updatedAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
      products:
        type: object
        required:
          - name
          - description
          - price
          - category
          - images
          - proteinType
          - isActive
        properties:
          id:
            type: uuid
            readOnly: true
            example: 5928876c-7bf6-43e9-95ca-bf569c8d2af5
          venueId:
            type: uuid
            readOnly: true
            example: 9138017c-6a3b-42b8-adda-a1f1b94377e5
            description: Venue ID From Table Schema venueProfile
          productName:
            type: string
            example: Cheese Spaghetti
          description:
            type: string
            example: Cheese spaghetti with spicy tomato sauce with generous chicken and meat
          price:
            type: number
            example: 10
            description: write only number of money
          category:
            type: string
            example: spaghetti
            enum:
              - dessert
              - spaghetti
              - drink
          images:
            type: array
            items:
              type: string
            example:
              - https://assets.appetizr.co/2021/03/2432ad3e-1d48-4a94-8521-966a14b42cc5.png
              - https://assets.appetizr.co/2021/03/2e4b2ff3-6846-428f-8ef3-8ff7df22fc8f.png
          proteinType:
            type: string
            enum:
              - vegan
              - meat
              - vegetables
          isActive:
            type: boolean
            example: true
          createdAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
          updatedAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
      orders:
        type: object
        required:
          - venueId
          - productIds
          - instruction
          - discountCode
        properties:
          id:
            type: uuid
            readOnly: true
            example: b6fccce5-69fc-43b0-93f1-2187c92bacc5
          userId:
            type: uuid
            readOnly: true
            example: c8402b37-0f24-43db-be89-ae7ac7983e16
            description: User ID From Table Schema memberProfile
          userEmail:
            type: string
            readOnly: true
            example: johndoe@example.com
            description: User Email From Table Schema memberProfile
          venueId:
            type: uuid
            example: 9138017c-6a3b-42b8-adda-a1f1b94377e5
            description: Venue ID From Table Schema venueProfile
          venueEmail:
            type: string
            readOnly: true
            example: operahouse@example.com
            description: Venue Email From Table Schema venueProfile
          productIds:
            type: array
            items:
              $ref: "#/components/schemas/products"
          totalPrice:
            type: number
            readOnly: true
            example: 100
            description: Total Price Order (Without Discount)
          paymentDetail:
            type: string
            readOnly: true
            example: stripe
          transactionDate:
            type: date-time
            readOnly: true
            example: 2021-03-17T13:22:48.349Z
          paymentStatus:
            type: string
            readOnly: true
            example: payment_verified
            enum:
              - waiting_payment
              - payment_failed
              - payment_refund
              - payment_verified
          instruction:
            type: string
            example: please add more sauce
          orderStatus:
            type: string
            readOnly: true
            example: in_progress
            enum:
              - cancel
              - in_progress
              - done
          discountCode:
            type: string
            example: 20OFF
          discountPrice:
            type: number
            readOnly: true
            example: 10
            description: Total Discount Price
          rating:
            type: number
            readOnly: true
            example: 5
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
          reviews:
            type: string
            readOnly: true
            example: the food is very good, the place to eat is also very comfortable
          userSessionToken:
            type: string
            readOnly: true
          createdAt:
            type: date-time
            readOnly: true
            example: 2021-03-17T13:22:30.192Z
          updatedAt:
            type: date-time
            readOnly: true
            example: 2021-03-17T13:22:48.349Z
      discounts:
        type: object
        required:
          - voucherCode
          - percentage
          - minOrder
          - maxDiscAmount
          - isActive
          - startDate
          - endDate
        properties:
          id:
            type: uuid
            readOnly: true
            example: c1bf2841-9a57-4f51-82c7-27a3d63f3558
          venueId:
            type: uuid
            readOnly: true
            example: 9138017c-6a3b-42b8-adda-a1f1b94377e5
            description: Venue ID From Table Schema venueProfile
          voucherCode:
            type: string
            example: 20OFF
          percentage:
            type: number
            minimum: 1
            maximum: 100
            example: 10
          minOrder:
            type: number
            example: 25
            description: Minimum Order in $AUD
          maxDiscAmount:
            type: number
            example: 10
            description: Maximum Discount Price in $AUD
          isActive:
            type: boolean
            example: true
            description: Set Voucher Code Active or Not
          startDate:
            type: date-time
            example: 2021-03-16T07:00:00.000Z
            description: Set Voucher Code Starting Date
          endDate:
            type: date-time
            example: 2021-03-17T07:00:00.000Z
            description: Set Voucher Code End Date
          createdAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z
          updatedAt:
            type: date-time
            readOnly: true
            example: 2021-03-16T08:18:26.477Z

    queryParameter:
      idFilter:
        in: path
        name: id
        schema:
          type: string
        description: Filter by ID
      venueIdFilter:
        in: path
        name: id
        schema:
          type: string
        description: Filter by Venue ID
      nameFilter:
        in: query
        name: name
        schema:
          type: string
        description: Filter by Name
      productsortBy:
        in: query
        name: sortBy
        schema:
          type: string
          enum:
            - recent_update
            - favorites
            - populatiry
        description: 'For "populatiry", this will show recent venue with the most trx in 7 Days'
      culturCategoryFilter:
        in: query
        name: cultureCategory
        schema:
          type: string
        description: 'Filter Venue By Culture Category'
      postalCodeFilter:
        in: query
        name: postalCode
        schema:
          type: number
        description: 'Filter Venue By Postal Code'
        
    requestBodies:
      UploadImage:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: binary
                  example: file.png
                  description: "Format File Support: .jpg, .jpeg, .png"
            encoding:
              contentType: image/png, image/jpeg
      Venue:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/venueProfile"
        description: Venue Profile Parameter
      ProfilePicture:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
                  example: profilePic.png
                  description: "Format File Support: .jpg, .jpeg, .png"
            encoding:
              contentType: image/png, image/jpeg
        description: Venue Profile Parameter
      Member:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/memberProfile"
        description: Venue Profile Parameter
      VenueFavorite:
        description: Venue Favorites Parameter
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userFavorites"
      VenueFavoriteID:
        description: Venue Favorites ID Parameter
        content:
          application/json:
            schema:
              type: object
              properties:
                isBlocked:
                  type: boolean
                  example: false
                  description: true = Block Venue, false = Favorite Venue
      Product:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/products"
      Order:
        content:
          application/json:
            schema:
              type: object
              properties:
                venueId:
                  type: uuid
                  example: 9138017c-6a3b-42b8-adda-a1f1b94377e5
                  description: Venue ID From Table Schema venueProfile
                productIds:
                  type: array
                  example:
                  - 5955d7e3-3c58-4967-9cce-3b49336fa26f
                  - b010f1c6-44ff-4980-a167-6735a4f9b9af
                  - f2f25976-2d0c-4ec1-9d10-d5a4188541cb
                instruction:
                  type: string
                  example: please add more sauce
                discountCode:
                  type: string
                  example: 20OFF
                paymentDetail:
                  type: string
                  example: stripe
      OrderVenue:
        content:
          application/json:
            schema:
              type: object
              required:
                - orderStatus
              properties:
                orderStatus:
                  type: string
                  example: done
                  enum:
                    - cancel
                    - in_progress
                    - done
                paymentStatus:
                  type: string
                  example: payment_verified
                  enum:
                    - waiting_payment
                    - payment_failed
                    - payment_refund
                    - payment_verified
                    
    responseBodies:
      UploadImage:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: string
                  example: https://assets.appetizr.co/2021/03/9713647c-c217-4b95-9721-51c6d7cdab92.png
      Venue:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  $ref: "#/components/schemas/venueProfile"
      Member:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  $ref: "#/components/schemas/memberProfile"
      VenueAll:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/venueProfile"
      VenueFavoriteAll:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/userFavorites"
      VenueFavorite:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  $ref: "#/components/schemas/userFavorites"
      ProductsVenueMember:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/products"
                      venue:
                        $ref: "#/components/schemas/venueProfile"
      ProductsVenue:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/products"
      Product:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: object
                  properties:
                    product:
                      $ref: "#/components/schemas/products"
                    venue:
                      $ref: "#/components/schemas/venueProfile"
      ProductVenue:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  $ref: "#/components/schemas/products"
      Order:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  $ref: "#/components/schemas/orders"
      OrderAllMember:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      orders:
                        $ref: "#/components/schemas/orders"
                      venue:
                        $ref: "#/components/schemas/venueProfile"
      OrderAllVenue:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/orders"
      OrderIdMember:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 200
                message:
                  type: string
                  example: success
                data:
                  type: object
                  properties:
                    orders:
                      $ref: "#/components/schemas/orders"
                    venue:
                      $ref: "#/components/schemas/venueProfile"
contentType: yaml
